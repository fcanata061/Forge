====================================
 MANUAL DO FORGE - Gerenciador de Pacotes Minimalista
====================================

1. INTRODUÇÃO
-------------
O Forge é um gerenciador de pacotes source-based, inspirado no KISS,
minimalista porém completo.  
Ele baixa o código-fonte, aplica patches, compila, instala e gerencia
dependências recursivamente.  

Recursos principais:
- Dependências recursivas inteligentes
- Hooks globais e por pacote (pre-build, post-install, etc.)
- Logs detalhados por pacote
- Suporte a múltiplos repositórios
- Paralelismo configurável
- Upgrade apenas para versões maiores
- Remoção segura + opção de remover órfãos
- Autocompletion para Bash e Zsh
- Sincronização de repositórios via Git

====================================
2. ESTRUTURA DE DIRETÓRIOS
------------------------------------
~/.forge/
 ├── db/         -> Banco de pacotes instalados
 │    ├── <pkg>/files  -> Lista de arquivos instalados
 │    ├── <pkg>/meta   -> Metadados do pacote
 ├── log/        -> Logs detalhados (por pacote)
 ├── src/        -> Fontes baixados
 ├── build/      -> Diretório de build temporário
 ├── hooks/      -> Hooks globais
 │    ├── pre-build
 │    ├── post-build
 │    ├── pre-install
 │    ├── post-install
 │    ├── pre-remove
 │    ├── post-remove

Repositórios de pacotes (exemplo):
$HOME/forge-repo/
 ├── base/
 │    └── gcc/
 │         ├── build
 │         ├── version
 │         ├── source
 │         ├── deps
 │         └── patches/
 ├── x11/
 ├── desktop/
 └── extras/

====================================
3. CONFIGURAÇÃO (.profile)
------------------------------------
Copie o conteúdo abaixo para ~/.profile e reinicie o shell.

# ==============================
# .profile do Forge
# ==============================

export FORGE_HOME="$HOME/.forge"

# Repositórios locais
export FORGE_REPOS=(
    "$HOME/forge-repo/base"
    "$HOME/forge-repo/x11"
    "$HOME/forge-repo/desktop"
    "$HOME/forge-repo/extras"
)

export FORGE_DB="$FORGE_HOME/db"
export FORGE_LOG="$FORGE_HOME/log"
export FORGE_SRC="$FORGE_HOME/src"
export FORGE_BUILD="$FORGE_HOME/build"
export FORGE_HOOKS="$FORGE_HOME/hooks"

export FORGE_JOBS="$(nproc)"
export FORGE_COLOR=1
export FORGE_STRIP=1
export FORGE_GIT_SYNC=1
export FORGE_LOG_LEVEL=debug

export FORGE_EDITOR="nano"
export PATH="$HOME/bin:$PATH"

# Autocompletion
if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
fi

_forge_complete() {
    local cur prev cmds pkgs
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    cmds="build install remove upgrade world sync search show list orphans"

    case "$prev" in
        build|install|remove|upgrade|show)
            pkgs=$(ls -1 "$FORGE_DB" 2>/dev/null)
            COMPREPLY=( $(compgen -W "$pkgs" -- "$cur") )
            return 0
            ;;
        orphans)
            COMPREPLY=( $(compgen -W "list auto" -- "$cur") )
            return 0
            ;;
    esac

    COMPREPLY=( $(compgen -W "$cmds" -- "$cur") )
    return 0
}
complete -F _forge_complete forge

if type compdef &>/dev/null; then
    _forge_zsh_complete() {
        reply=($(build install remove upgrade world sync search show list orphans))
    }
    compdef _forge_zsh_complete forge
fi

====================================
4. COMANDOS DO FORGE
------------------------------------
forge build <pkg>    -> Compila pacote (não instala)
forge install <pkg>  -> Instala pacote no sistema
forge remove <pkg>   -> Remove pacote (+ pergunta sobre órfãos)
forge upgrade <pkg>  -> Atualiza se houver versão maior
forge upgrade world  -> Atualiza todo o sistema
forge show <pkg>     -> Mostra detalhes do pacote
forge list           -> Lista pacotes instalados
forge search <nome>  -> Busca em repositórios
forge orphans list   -> Lista pacotes órfãos
forge orphans auto   -> Remove órfãos automaticamente
forge sync           -> Sincroniza repositórios git

====================================
5. HOOKS
------------------------------------
Hooks são scripts executados em momentos-chave:

~/.forge/hooks/
 ├── pre-build      -> executado antes de compilar
 ├── post-build     -> executado após compilar
 ├── pre-install    -> executado antes de instalar
 ├── post-install   -> executado após instalar
 ├── pre-remove     -> executado antes de remover
 ├── post-remove    -> executado após remover

Um hook recebe como argumento o nome do pacote.

Exemplo: ~/.forge/hooks/post-install
#!/bin/sh
echo "[HOOK] Pacote $1 instalado em $(date)" >> ~/.forge/log/hooks.log

====================================
6. LOGS
------------------------------------
Cada pacote tem um log detalhado:
~/.forge/log/<pkg>.log

Contém saída do build, instalação, erros e mensagens de debug.

====================================
7. EXEMPLO DE RECIPE (GCC)
------------------------------------
$HOME/forge-repo/base/gcc/
 ├── version   -> 13.2.0
 ├── source    -> https://ftp.gnu.org/gnu/gcc/gcc-13.2.0/gcc-13.2.0.tar.xz
 ├── deps      -> gmp mpfr mpc
 ├── patches/  -> (arquivos .patch opcionais)
 └── build     -> script de build

Exemplo do arquivo build:

#!/bin/sh
set -e
mkdir -p build
cd build
../configure \
  --prefix=/usr \
  --enable-languages=c,c++ \
  --disable-multilib \
  --disable-bootstrap \
  --enable-checking=release
make -j"$FORGE_JOBS"
make DESTDIR="$DESTDIR" install

====================================
8. SINCRONIZAÇÃO (SYNC)
------------------------------------
Se os repositórios forem git, use:

forge sync

Isso roda `git pull` em todos os repositórios listados em $FORGE_REPOS.

====================================
9. AUTOCOMPLETION
------------------------------------
- Bash: já incluso no .profile
- Zsh: já incluso no .profile

Para ativar:
$ source ~/.profile
$ forge <TAB>

====================================
10. FLUXO DE USO
------------------------------------
1. Configure o .profile
2. Crie os repositórios com pacotes
3. Rode `forge build <pkg>`
4. Rode `forge install <pkg>`
5. Use `forge upgrade world` para atualizar o sistema
6. Use `forge orphans list` e `forge orphans auto` para limpar

====================================
FIM DO MANUAL
====================================FORGE - Gerenciador de Pacotes Minimalista
========================================

1. Introdução
-------------
O **Forge** é um gerenciador de pacotes minimalista inspirado no KISS Linux.
Todo o sistema é construído em shell script puro, com foco em simplicidade,
transparência e auditabilidade. Não há banco de dados binário, apenas diretórios
e arquivos de texto em /var/db/forge/installed.

2. Estrutura de Diretórios
--------------------------
Repositórios de pacotes (normalmente versionados em Git):
/repo/
  base/
    gcc/
      build       # Script de compilação
      depends     # Lista de dependências
      sources     # URLs ou caminhos de fontes
      version     # Versão do pacote
      patches/    # Patches opcionais
  extras/
  desktop/
  x11/

Banco de dados local dos pacotes instalados:
/var/db/forge/installed/<pacote>/
  version    # Versão instalada
  manifest   # Lista de arquivos instalados
  depends    # Dependências registradas

Diretório de compilação temporário:
/var/tmp/forge/build/

Diretório para cache de fontes:
/var/cache/forge/sources/

Diretório para pacotes binários (.tar.xz):
/var/cache/forge/packages/

3. Configuração (.profile)
--------------------------
As variáveis principais são definidas em ~/.profile (ou /etc/profile):

export FORGE_REPO="$HOME/repo"
export FORGE_DB="/var/db/forge/installed"
export FORGE_BUILD="/var/tmp/forge/build"
export FORGE_CACHE="/var/cache/forge/sources"
export FORGE_PKG="/var/cache/forge/packages"
export FORGE_COLOR=1

Após editar, rode:
$ source ~/.profile

4. Comandos do Forge
--------------------
$ forge build <pkg>     # Compila um pacote e gera um tar.xz
$ forge install <pkg>   # Instala o pacote no sistema
$ forge remove <pkg>    # Remove o pacote
$ forge update          # Recompila todos os pacotes instalados
$ forge orphans         # Lista pacotes órfãos
$ forge show <pkg>      # Mostra detalhes do pacote
$ forge search <name>   # Busca pacotes no repositório

5. Funcionamento Interno
-------------------------
- O "forge build" resolve as dependências lendo o arquivo "depends".
- Baixa os tarballs definidos em "sources".
- Extrai, aplica patches (se houver), executa o script "build".
- Instala em $DESTDIR, gera um tar.xz, guarda em /var/cache/forge/packages.
- O "forge install" apenas extrai o tarball para / e registra em /var/db/forge/installed.
- O "forge remove" lê o manifesto e apaga todos os arquivos listados.
- O "forge orphans" mostra pacotes que não são dependência de ninguém.

6. Exemplo de Pacote: GCC
-------------------------
Diretório: $FORGE_REPO/base/gcc/

sources:
http://ftp.gnu.org/gnu/gcc/gcc-12.2.0/gcc-12.2.0.tar.xz

version:
12.2.0

depends:
binutils
glibc
zlib

build (com shebang):
#!/bin/sh
mkdir -p build
cd build
../configure \\
  --prefix=/usr \\
  --enable-languages=c,c++ \\
  --disable-multilib \\
  --disable-bootstrap \\
  --enable-checking=release
make
make DESTDIR=$DESTDIR install

7. Instalação e Uso
-------------------
Clone seu repositório (exemplo):
$ git clone https://seu.git.repo/forge-pkgs ~/repo

Atualize variáveis no ~/.profile:
export FORGE_REPO="$HOME/repo"

Inicie o uso:
$ forge build gcc
$ forge install gcc
$ forge show gcc
$ forge orphans

8. Logs
-------
Todos os logs ficam em /var/log/forge/<pkg>.log

9. Resumo
---------
O Forge é simples, cada pacote é apenas um diretório com arquivos de receita.
A instalação é transparente, audível e reproduzível. Ideal para sistemas
minimalistas e inspirados no LFS.
